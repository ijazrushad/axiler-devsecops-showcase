name: Build, Scan, and Deploy to GKE

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_GAR_LOCATION: asia-south1
  GKE_CLUSTER: axiler-gke-cluster
  GKE_ZONE: asia-south1-b
  IMAGE_NAME: juice-shop
  HELM_RELEASE_NAME: juiceshop-prod 

jobs:
  build-scan-and-push:
    name: "Build, Scan, and Push Image"
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ github.sha }}

    steps:
    - name: 'Checkout code'
      uses: actions/checkout@v4

    - name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v2'
      with:
        workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
        service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
        create_credentials_file: true
        export_environment_variables: true

    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v2'

    - name: 'Configure Docker for GAR'
      run: gcloud auth configure-docker $GCP_GAR_LOCATION-docker.pkg.dev

    - name: 'Build Docker image'
      id: build
      run: |-
        IMAGE_URI="$GCP_GAR_LOCATION-docker.pkg.dev/$GCP_PROJECT_ID/axiler-docker-repo/$IMAGE_NAME"
        docker build \
          --tag "$IMAGE_URI:${{ github.sha }}" \
          --tag "$IMAGE_URI:latest" \
          .
        echo "digest=$(docker inspect --format='{{index .RepoDigests 0}}' $IMAGE_URI:${{ github.sha }} 2>/dev/null || echo 'none')" >> $GITHUB_OUTPUT

    - name: 'Scan image for vulnerabilities with Trivy'
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.GCP_GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/axiler-docker-repo/${{ env.IMAGE_NAME }}:${{ github.sha }}'
        format: 'table'
        severity: 'HIGH,CRITICAL'
        exit-code: '0'  # Don't fail the build, just report

    - name: 'Scan image for SARIF report'
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.GCP_GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/axiler-docker-repo/${{ env.IMAGE_NAME }}:${{ github.sha }}'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'HIGH,CRITICAL'

    - name: 'Upload Trivy scan results to GitHub Security tab'
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: 'Push Docker image to GAR'
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |-
        docker push "$GCP_GAR_LOCATION-docker.pkg.dev/$GCP_PROJECT_ID/axiler-docker-repo/$IMAGE_NAME:${{ github.sha }}"
        docker push "$GCP_GAR_LOCATION-docker.pkg.dev/$GCP_PROJECT_ID/axiler-docker-repo/$IMAGE_NAME:latest"

  deploy-to-gke:
    name: "Deploy to GKE"
    needs: build-scan-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: 'Checkout code'
      uses: actions/checkout@v4

    - name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v2'
      with:
        workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
        service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v2'

    - name: 'Get GKE cluster credentials'
      run: gcloud container clusters get-credentials $GKE_CLUSTER --zone $GKE_ZONE --project $GCP_PROJECT_ID

    - name: 'Install Helm'
      uses: azure/setup-helm@v4
      with:
        version: '3.12.0'

    - name: 'Deploy with Helm'
      run: |-
        helm upgrade --install $HELM_RELEASE_NAME ./kubernetes/juice-shop \
          --namespace default \
          --set image.tag=${{ needs.build-scan-and-push.outputs.image-tag }} \
          --set image.repository="$GCP_GAR_LOCATION-docker.pkg.dev/$GCP_PROJECT_ID/axiler-docker-repo/$IMAGE_NAME" \
          --wait \
          --timeout=10m

    - name: 'Verify deployment'
      run: |-
        kubectl rollout status deployment/$HELM_RELEASE_NAME --timeout=300s
        kubectl get services